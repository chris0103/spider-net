digraph concurrent {
	rankdir = BT;
    fontname = "Verdana";
    fontsize = 12;
    node [fontname = "Verdana", fontsize = 12, shape = "record"];
    edge [fontname = "Verdana", fontsize = 12];
	
	subgraph cluster25 {
		label = "executor";
		style = filled;
		color = grey90;
		Executor [label = "{<f0>Executor|<f2>+ execute(Runnable) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		ExecutorService [label = "{<f0>ExecutorService|<f2>+ submit(Callable&lt;T&gt;) : Future&lt;T&gt; &lt;T&gt;\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
	}
	
	subgraph cluster50 {
		label = "future";
		style = filled;
		color = grey90;
		CompletableFuture [label = "{<f0>CompletableFuture&lt;T&gt;||}", style = "rounded, filled", fillcolor = "springgreen"];
		CompletionStage [label = "{<f0>CompletionStage&lt;T&gt;|<f2>+ exceptionally(Function&lt;Throwable, ? extends T&gt;) : CompletionStage&lt;T&gt;\l+ handle(BiFunction&lt;? super T, Throwable, ? extends U&gt;) : CompletionStage&lt;U&gt; &lt;U&gt;\l+ thenAccept(Consumer&lt;? super T&gt;) : CompletionStage&lt;Void&gt; \l+ thenApply(Function&lt;? super T,? extends U&gt;) : CompletionStage&lt;U&gt; &lt;U&gt;\l+ thenCombine(CompletionStage&lt;? extends U&gt;, BiFunction&lt;? super T,? super U,? extends V&gt;) : CompletionStage&lt;V&gt; &lt;U,V&gt;\l+ thenCompose(Function&lt;? super T, ? extends CompletionStage&lt;U&gt;&gt;) : CompletionStage&lt;U&gt; &lt;U&gt;\l+ thenRun(Runnable) : CompletionStage&lt;Void&gt; \l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		Future [label = "{<f0>Future&lt;V&gt;|<f2>+ cancel(boolean) : boolean\l+ get(long, TimeUnit) : V\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		FutureTask [label = "{<f0>FutureTask&lt;V&gt;|<f1>+ callable : Callable&lt;V&gt;\l|}", style = "rounded, filled", fillcolor = "springgreen"];
		Runnable [shape = "plaintext", label = "Runnable"];
		RunnableFuture [label = "{<f0>RunnableFuture&lt;V&gt;|<f2>&#186; run() : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
	}
	
	/*
	subgraph cluster00 {
		label = "";
		style = filled;
		color = grey90;
	}
	
	// item_name [label = "item_lable", style = "filled", fillcolor = "palegreen"];
	// record_name [shape = "record", label = "{{<f0>interface|{<f10>(other implementers)}}|(other methods)}"];
	// interface_minor [shape = "plaintext", label = "Interface_minor"];
	// interface [label = "{<f0>Interface|<f2>+ method() : return_type\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
	// abstract_class [label = "{<f0>Abstract_Class|<f1>+ field1 : type\l+ field2 : type\l|<f2>&#170; abstract_method() : return_type\l&#537; static_method() : return_type\l+ method() : return_type\l}", style = "rounded, filled, dashed", fillcolor = "springgreen"];
	// class [label = "{<f0>Class|<f1>+ field1 : type\l+ field2 : type\l&#10765; final_field : type\l&#537; static_field : type\l|<f2>+ method() : return_type\l&#537; static_method() : return_type\l&#186; overriden_method() : return_type\l}", style = "rounded, filled", fillcolor = "springgreen"];	
	*/
	
	// item_foo -> item_bar;
	
	// Implementation -> Interface [arrowhead = "empty"];
	// Subclass -> Class;	
	// Referer -> Referee [arrowhead = "vee"];
	// Implementation -> InterfaceMinor [arrowhead = "odot"];	
	
	// future
	CompletableFuture -> Future [arrowhead = "empty", label = "V = T"];
	CompletableFuture -> CompletionStage [arrowhead = "empty"];
	RunnableFuture -> Future;
	RunnableFuture -> Runnable [arrowhead = "odot"];
	FutureTask -> RunnableFuture [arrowhead = "empty"];
	
	// executor
	ExecutorService -> Executor;
	ExecutorService:f2 -> Future [arrowhead = "vee"];
}

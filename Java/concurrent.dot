digraph concurrent {
	rankdir = BT;
    fontname = "Verdana";
    fontsize = 12;
    node [fontname = "Verdana", fontsize = 12, shape = "record"];
    edge [fontname = "Verdana", fontsize = 12];
	
	subgraph cluster25 {
		label = "executor";
		style = filled;
		color = grey90;
		AbstractExecutorService [label = "{<f0>AbstractExecutorService||<f2>+ newTaskFor(Callable&lt;T&gt;) : RunnableFuture&lt;T&gt;\l+ newTaskFor(Runnable, T) : RunnableFuture&lt;T&gt;\l}", style = "rounded, filled, dashed", fillcolor = "springgreen"];
		CompletionService [label = "{<f0>CompletionService&lt;&gt;|<f2>+ poll() : Future&lt;V&gt;\l+ poll(long, TimeUnit) : Future&lt;V&gt;\l+ submit(Callable&lt;V&gt;) : Future&lt;V&gt;\l+ submit(Runnable, V) : Future&lt;V&gt;\l+ take() : Future&lt;V&gt;\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		Executor [label = "{<f0>Executor|<f2>+ execute(Runnable) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		ExecutorCompletionService [label = "{<f0>ExecutorCompletionService&lt;&gt;|<f1>+ aes : AbstractExecutorService\l+ completionQueue : BlockingQueue&lt;Future&lt;V&gt;&gt;\l+ executor : Executor\l|}", style = "rounded, filled", fillcolor = "springgreen"];
		ExecutorService [label = "{<f0>ExecutorService|<f2>+ awaitTermination(long, TimeUnit) : boolean\l+ invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt;) : List&lt;Future&lt;T&gt;&gt; &lt;T&gt;\l+ invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt;, long, TimeUnit) : List&lt;Future&lt;T&gt;&gt; &lt;T&gt;\l+ invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt;) : T &lt;T&gt;\l+ invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt;, long, TimeUnit) : T &lt;T&gt;\l+ submit(Callable&lt;T&gt;) : Future&lt;T&gt; &lt;T&gt;\l+ shutdown() : void\l+ shutdownNow() : List&lt;Runnable&gt;\l+ submit(Runnable) : Future&lt;?&gt;\l+ submit(Runnable, T) : Future&lt;T&gt; &lt;T&gt;\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		ScheduledExecutorService [label = "{<f0>ScheduledExecutorService||<f2>+ schedule(Runnable, long, TimeUnit) : ScheduledFuture&lt;?&gt;\l+ schedule(Callable&lt;V&gt;, long, TimeUnit) : ScheduledFuture&lt;V&gt; &lt;V&gt;\l+ scheduleAtFixedRate(Runnable, long, long, TimeUnit) : ScheduledFuture&lt;?&gt;\l+ scheduleWithFixedDelay(Runnable, long, long, TimeUnit) : ScheduledFuture&lt;?&gt;\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		ThreadPoolExecutor [label = "{<f0>ThreadPoolExecutor|<f1>+ corePoolSize : int\l+ keepAliveTime : long\l+ maximumPoolSize : int\l+ threadFactory : ThreadFactory\l+ workQueue : BlockingQueue&lt;Runnable&gt;\l|<f2>+ method() : return_type\l&#537; static_method() : return_type\l&#186; overriden_method() : return_type\l}", style = "rounded, filled", fillcolor = "springgreen"];
	}
	
	subgraph cluster50 {
		label = "future";
		style = filled;
		color = grey90;
		CompletableFuture [label = "{<f0>CompletableFuture&lt;T&gt;||<f2>&#537; allOf(CompletableFuture&lt;?&gt;...) : CompletableFuture&lt;Void&gt;\l+ join() : T\l}", style = "rounded, filled", fillcolor = "springgreen"];
		CompletionStage [label = "{<f0>CompletionStage&lt;T&gt;|<f2>+ exceptionally(Function&lt;Throwable, ? extends T&gt;) : CompletionStage&lt;T&gt;\l+ handle(BiFunction&lt;? super T, Throwable, ? extends U&gt;) : CompletionStage&lt;U&gt; &lt;U&gt;\l+ thenAccept(Consumer&lt;? super T&gt;) : CompletionStage&lt;Void&gt; \l+ thenApply(Function&lt;? super T,? extends U&gt;) : CompletionStage&lt;U&gt; &lt;U&gt;\l+ thenCombine(CompletionStage&lt;? extends U&gt;, BiFunction&lt;? super T,? super U,? extends V&gt;) : CompletionStage&lt;V&gt; &lt;U,V&gt;\l+ thenCompose(Function&lt;? super T, ? extends CompletionStage&lt;U&gt;&gt;) : CompletionStage&lt;U&gt; &lt;U&gt;\l+ thenRun(Runnable) : CompletionStage&lt;Void&gt; \l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		Future [label = "{<f0>Future&lt;V&gt;|<f2>+ cancel(boolean) : boolean\l+ get(long, TimeUnit) : V\l+ get() : V\l+ isCancelled() : boolean\l+ isDone() : boolean\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		FutureTask [label = "{<f0>FutureTask&lt;V&gt;|<f1>+ callable : Callable&lt;V&gt;\l|}", style = "rounded, filled", fillcolor = "springgreen"];
		Runnable [shape = "plaintext", label = "Runnable"];
		RunnableFuture [label = "{<f0>RunnableFuture&lt;V&gt;|<f2>&#186; run() : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
	}
	
	/*
	subgraph cluster00 {
		label = "";
		style = filled;
		color = grey90;
	}
	
	// item_name [label = "item_lable", style = "filled", fillcolor = "palegreen"];
	// record_name [shape = "record", label = "{{<f0>interface|{<f10>(other implementers)}}|(other methods)}"];
	// interface_minor [shape = "plaintext", label = "Interface_minor"];
	// interface [label = "{<f0>Interface|<f2>+ method() : return_type\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
	// abstract_class [label = "{<f0>Abstract_Class|<f1>+ field1 : type\l+ field2 : type\l|<f2>&#170; abstract_method() : return_type\l&#537; static_method() : return_type\l+ method() : return_type\l}", style = "rounded, filled, dashed", fillcolor = "springgreen"];
	// class [label = "{<f0>Class|<f1>+ field1 : type\l+ field2 : type\l&#10765; final_field : type\l&#537; static_field : type\l|<f2>+ method() : return_type\l&#537; static_method() : return_type\l&#186; overriden_method() : return_type\l}", style = "rounded, filled", fillcolor = "springgreen"];	
	*/
	
	// item_foo -> item_bar;
	
	// Implementation -> Interface [arrowhead = "empty"];
	// Subclass -> Class;	
	// Referer -> Referee [arrowhead = "vee"];
	// Implementation -> InterfaceMinor [arrowhead = "odot"];	
	
	// future
	CompletableFuture -> Future [arrowhead = "empty", label = "V = T"];
	CompletableFuture -> CompletionStage [arrowhead = "empty"];
	RunnableFuture -> Future;
	RunnableFuture -> Runnable [arrowhead = "odot"];
	FutureTask -> RunnableFuture [arrowhead = "empty"];
	
	// executor
	ExecutorService -> Executor;
	ExecutorService:f2 -> Future [arrowhead = "vee", label = "V = T"];
	AbstractExecutorService -> ExecutorService [arrowhead = "empty"];
	AbstractExecutorService:f2 -> FutureTask [arrowhead = "vee", label = "V = T"];
	ThreadPoolExecutor -> AbstractExecutorService;
	ExecutorCompletionService:f1 -> AbstractExecutorService [arrowhead = "vee"];
	ExecutorCompletionService:f1 -> Executor [arrowhead = "vee"];
	ExecutorCompletionService -> CompletionService [arrowhead = "empty"];
	ScheduledExecutorService -> ExecutorService;
	
	/*
	
	
	RunnableFuture -> Runnable [arrowhead = "odot"];
	RunnableFuture -> Future;
	
	Executors:f2 -> ThreadPoolExecutor [arrowhead = "vee"];
	
	Executors:f2 -> ScheduledThreadPoolExecutor [arrowhead = "vee"];
	ScheduledThreadPoolExecutor -> ScheduledExecutorService [arrowhead = "empty"];
	
	ScheduledExecutorService:f2 -> ScheduledFuture;
	ScheduledFuture -> Future;
	ScheduledThreadPoolExecutor -> ThreadPoolExecutor;
	RunnableScheduledFuture -> RunnableFuture;
	RunnableScheduledFuture -> ScheduledFuture;
	*/
}

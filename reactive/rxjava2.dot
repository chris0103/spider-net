digraph reactive {
	rankdir = BT;
    fontname = "Verdana";
    fontsize = 12;
    node [fontname = "Verdana", fontsize = 12, shape = "record"];
    edge [fontname = "Verdana", fontsize = 12];
    
	subgraph cluster25 {
		label = "reactive stream (spec)";
		style = filled;
		color = grey90;
		Processor [label = "{<f0>Processor&lt;T, R&gt;|}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		Publisher [label = "{<f0>Publisher&lt;T&gt;|<f2>+ subscribe(Subscriber&lt;? super T&gt;) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		Subscriber [label = "{<f0>Subscriber&lt;T&gt;|<f2>+ onComplete() : void\l+ onError(Throwable) : void\l+ onNext(T) : void\l+ onSubscribe(Subscription) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		Subscription [label = "{<f0>Subscription|<f2>+ cancel() : void\l+ request(long) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
	}
	
	subgraph cluster75 {
		label = "RxJava 2";
		style = filled;
		color = grey90;
		Completable [label = "{<f0>Completable|<f1>|<f2>&#537; create(CompletableOnSubscribe) : Completable\l&#537; fromAction(Action) : Completable\l&#537; fromCallable(Callable&lt;? extends T&gt;) : Completable\l&#186; subscribe(CompletableObserver) : void\l&#10765; subscribeWith(E) : E &lt;E extends CompletableObserver&gt;\l}", style = "rounded, filled, dashed", fillcolor = "springgreen"];
		CompletableEmitter [label = "{<f0>CompletableEmitter|<f2>}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		CompletableFromPublisher [label = "{<f0>&#10765; CompletableFromPublisher&lt;T&gt;|<f1>&#10765; flowable : Publisher&lt;? extends T&gt;\l|<f2>}", style = "rounded, filled", fillcolor = "springgreen"];
		CompletableObserver [label = "{<f0>CompletableObserver|<f2>+ onError(Throwable) : void\l+ onComplete(T) : void\l+ onSubscribe(Disposable) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		CompletableOnSubscribe [label = "{<f0>CompletableOnSubscribe|<f2>+ subscribe(CompletableEmitter) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		CompletableSource [label = "{<f0>CompletableSource|<f2>+ subscribe(CompletableObserver) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		Disposable [label = "{<f0>Disposable|<f2>+ dispose() : void\l+ isDisposed() : boolean\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		DisposableObserver [label = "{<f0>DisposableObserver&lt;T&gt;|<f1>&#10765; s : AtomicReference&lt;Disposable&gt;\l|<f2>&#186; &#10765; dispose() : void\l&#186; &#10765; isDisposed() : boolean\l&#186; &#10765; onSubscribe(Disposable) : void\l}", style = "rounded, filled, dashed", fillcolor = "springgreen"];
		DisposableSubscriber [label = "{<f0>DisposableSubscriber&lt;T&gt;|<f1>&#10765; s : AtomicReference&lt;Disposable&gt;\l|<f2>&#186; &#10765; dispose() : void\l&#186; &#10765; isDisposed() : boolean\l&#186; &#10765; onSubscribe(Subscription) : void\l}", style = "rounded, filled, dashed", fillcolor = "springgreen"];
		Emitter [label = "{<f0>Emitter&lt;T&gt;|<f2>}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		Flowable [label = "{<f0>Flowable&lt;T&gt;|<f1>|<f2>&#537; create(FlowableOnSubscribe&lt;T&gt;, FlowableEmitter.BackpressureMode) : Flowable&lt;T&gt; &lt;T&gt;\l&#537; fromArray(T...) : Flowable&lt;T&gt; &lt;T&gt;\l&#537; fromCallable(Callable&lt;? extends T&gt;) : Flowable&lt;T&gt; &lt;T&gt;\l&#537; fromIterable(Iterable&lt;? extends T&gt;) : Flowable&lt;T&gt; &lt;T&gt;\l&#537; just(T) : Flowable&lt;T&gt; &lt;T&gt;\l&#186; subscribe(Subscriber&lt;? super T&gt;) : void\l&#10765; subscribeWith(E) : E &lt;E extends Subscriber&lt;? super T&gt;&gt;\l&#10765; toCompletable() : Completable\l&#10765; toObservable() : Observable&lt;T&gt;\l&#10765; toSingle() : Single&lt;T&gt;\l}", style = "rounded, filled, dashed", fillcolor = "springgreen"];
		FlowableEmitter [label = "{<f0>FlowableEmitter&lt;T&gt;|<f2>}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		FlowableFromObservables [label = "{<f0>&#10765; FlowableFromObservable&lt;T&gt;|<f1>&#10765; upstream : Observable&lt;T&gt;\l|<f2>}", style = "rounded, filled", fillcolor = "springgreen"];
		FlowableOnSubscribe [label = "{<f0>FlowableOnSubscribe&lt;T&gt;|<f2>+ subscribe(FlowableEmitter&lt;T&gt;) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		FlowableProcessor [label = "{<f0>FlowableProcessor&lt;T&gt;|<f1>|<f2>}", style = "rounded, filled, dashed", fillcolor = "springgreen"];
		Observable [label = "{<f0>Observable&lt;T&gt;|<f1>|<f2>&#537; create(ObservableOnSubscribe&lt;T&gt;) : Observable&lt;T&gt; &lt;T&gt;\l&#537; fromArray(T...) : Observable&lt;T&gt; &lt;T&gt;\l&#537; fromCallable(Callable&lt;? extends T&gt;) : Observable&lt;T&gt; &lt;T&gt;\l&#537; fromIterable(Iterable&lt;? extends T&gt;) : Observable&lt;T&gt; &lt;T&gt;\l&#537; just(T) : Observable&lt;T&gt; &lt;T&gt;\l&#186; subscribe(Observer&lt;? super T&gt;) : void\l&#10765; subscribeWith(E) : E &lt;E extends Observer&lt;? super T&gt;&gt;\l&#10765; toFlowable(BackpressureStrategy) : Flowable&lt;T&gt;\l}", style = "rounded, filled, dashed", fillcolor = "springgreen"];
		ObservableEmitter [label = "{<f0>ObservableEmitter&lt;T&gt;|<f2>}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		ObservableFromPublisher [label = "{<f0>&#10765; ObservableFromPublisher&lt;T&gt;|<f1>&#10765; publisher : Publisher&lt;? extends T&gt;\l|<f2>}", style = "rounded, filled", fillcolor = "springgreen"];
		ObservableOnSubscribe [label = "{<f0>ObservableOnSubscribe&lt;T&gt;|<f2>+ subscribe(ObservableEmitter&lt;T&gt;) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		ObservableSource [label = "{<f0>ObservableSource&lt;T&gt;|<f2>+ subscribe(Observer&lt;? super T&gt;) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		Observer [label = "{<f0>Observer&lt;T&gt;|<f2>+ onComplete() : void\l+ onError(Throwable) : void\l+ onNext(T) : void\l+ onSubscribe(Disposable) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		Single [label = "{<f0>Single&lt;T&gt;|<f1>|<f2>&#537; create(SingleOnSubscribe&lt;T&gt;) : Single&lt;T&gt; &lt;T&gt;\l&#537; fromCallable(Callable&lt;? extends T&gt;) : Single&lt;T&gt; &lt;T&gt;\l&#186; subscribe(SingleObserver&lt;? super T&gt;) : void\l&#10765; subscribeWith(E) : E &lt;E extends SingleObserver&lt;? super T&gt;&gt;\l}", style = "rounded, filled, dashed", fillcolor = "springgreen"];
		SingleEmitter [label = "{<f0>SingleEmitter&lt;T&gt;|<f2>}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		SingleFromPublisher [label = "{<f0>&#10765; SingleFromPublisher&lt;T&gt;|<f1>&#10765; publisher : Publisher&lt;? extends T&gt;\l|<f2>}", style = "rounded, filled", fillcolor = "springgreen"];
		SingleObserver [label = "{<f0>SingleObserver&lt;T&gt;|<f2>+ onError(Throwable) : void\l+ onSubscribe(Disposable) : void\l+ onSuccess(T) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		SingleOnSubscribe [label = "{<f0>SingleOnSubscribe&lt;T&gt;|<f2>+ subscribe(SingleEmitter&lt;T&gt;) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		SingleSource [label = "{<f0>SingleSource&lt;T&gt;|<f2>+ subscribe(SingleObserver&lt;? super T&gt;) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
	}
	
	/*
	subgraph cluster00 {
		label = "";
		style = filled;
		color = grey90;
	}
	
	// item_name [label = "item_lable", style = "filled", fillcolor = "palegreen"];
	// record_name [shape = "record", label = "{{<f0>interface|{<f10>(other implementers)}}|(other methods)}"];
	// interface_minor [shape = "plaintext", label = "Interface_minor"];
	// interface [label = "{<f0>Interface|<f2>+ method() : return_type\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
	// abstract_class [label = "{<f0>Abstract_Class|<f1>+ field1 : type\l+ field2 : type\l|<f2>&#170; abstract_method() : return_type\l&#537; static_method() : return_type\l+ method() : return_type\l}", style = "rounded, filled, dashed", fillcolor = "springgreen"];
	// class [label = "{<f0>Class|<f1>+ field1 : type\l+ field2 : type\l&#10765; final_field : type\l&#537; static_field : type\l|<f2>+ method() : return_type\l&#537; static_method() : return_type\l&#186; overriden_method() : return_type\l}", style = "rounded, filled", fillcolor = "springgreen"];
	*/
	
	// Implementation -> Interface [arrowhead = "empty"];
	// Subclass -> Class;	
	// Referer -> Referee [arrowhead = "vee"];
	// Implementation -> InterfaceMinor [arrowhead = "odot"];	
	
	Processor -> Publisher [label = "T = T"];
	Processor -> Subscriber [label = "R = T"];
	Publisher:f2 -> Subscriber [arrowhead = "vee"];
	Subscriber:f2 -> Subscription [arrowhead = "vee"];
	
	Flowable -> Publisher [arrowhead = "empty", label = "T = T"];
	FlowableProcessor -> Flowable [label = "T = T"];
	FlowableProcessor -> Processor [arrowhead = "empty", label = "T = T, R = T"];
	
	FlowableFromObservables -> Flowable [label = "T = T"];
	FlowableFromObservables:f1 -> Observable [arrowhead = "vee", label = "T = T"];
	
	// observable
	ObservableSource:f2 -> Observer [arrowhead = "vee"];
	Observer:f2 -> Disposable [arrowhead = "vee"];
	Observable -> ObservableSource [arrowhead = "empty", label = "T = T"];
	ObservableFromPublisher -> Observable [label = "T = T"];
	
	// single
	SingleSource:f2 -> SingleObserver [arrowhead = "vee"];
	SingleObserver:f2 -> Disposable [arrowhead = "vee"];
	Single -> SingleSource [arrowhead = "empty", label = "T = T"];
	SingleFromPublisher -> Single [label = "T = T"];
	
	// completable
	CompletableSource:f2 -> CompletableObserver [arrowhead = "vee"];
	CompletableObserver:f2 -> Disposable [arrowhead = "vee"];
	Completable -> CompletableSource [arrowhead = "empty"];
	CompletableFromPublisher -> Completable;
	
	// subscriber
	Flowable:f2 -> FlowableOnSubscribe [arrowhead = "vee", label = "T = T"];
	FlowableOnSubscribe:f2 -> FlowableEmitter [arrowhead = "vee", label = "T = T"];
	FlowableEmitter -> Emitter [label = "T = T"];
	Observable:f2 -> ObservableOnSubscribe [arrowhead = "vee", label = "T = T"];
	ObservableOnSubscribe:f2 -> ObservableEmitter [arrowhead = "vee", label = "T = T"];
	ObservableEmitter -> Emitter [label = "T = T"];
	Completable:f2 -> CompletableOnSubscribe [arrowhead = "vee"];
	CompletableOnSubscribe:f2 -> CompletableEmitter [arrowhead = "vee"];
	Single:f2 -> SingleOnSubscribe [arrowhead = "vee", label = "T = T"];
	SingleOnSubscribe:f2 -> SingleEmitter [arrowhead = "vee", label = "T = T"];
	
	// disposables
	DisposableObserver -> Observer [arrowhead = "empty", label = "T = T"];
	DisposableObserver -> Disposable [arrowhead = "empty"];
	DisposableSubscriber -> Subscriber [arrowhead = "empty", label = "T = T"];
	DisposableSubscriber -> Disposable [arrowhead = "empty"];
}

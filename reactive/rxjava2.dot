digraph reactive {
	rankdir = BT;
    fontname = "Verdana";
    fontsize = 12;
    node [fontname = "Verdana", fontsize = 12, shape = "record"];
    edge [fontname = "Verdana", fontsize = 12];
    
	subgraph cluster25 {
		label = "reactive stream (spec)";
		style = filled;
		color = grey90;
		Processor [label = "{<f0>Processor&lt;T, R&gt;|}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		Publisher [label = "{<f0>Publisher&lt;T&gt;|<f2>+ subscribe(Subscriber&lt;? super T&gt;) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		Subscriber [label = "{<f0>Subscriber&lt;T&gt;|<f2>+ onComplete() : void\l+ onError(Throwable) : void\l+ onNext(T) : void\l+ onSubscribe(Subscription) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
		Subscription [label = "{<f0>Subscription|<f2>+ cancel() : void\l+ request(int) : void\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
	}
	
	subgraph cluster75 {
		label = "";
		style = filled;
		color = grey90;
	}
	
	/*
	subgraph cluster00 {
		label = "";
		style = filled;
		color = grey90;
	}
	
	// item_name [label = "item_lable", style = "filled", fillcolor = "palegreen"];
	// record_name [shape = "record", label = "{{<f0>interface|{<f10>(other implementers)}}|(other methods)}"];
	// interface_minor [shape = "plaintext", label = "Interface_minor"];
	// interface [label = "{<f0>Interface|<f2>+ method() : return_type\l}", style = "rounded, filled", fillcolor = "mediumpurple1"];
	// abstract_class [label = "{<f0>Abstract_Class|<f1>+ field1 : type\l+ field2 : type\l|<f2>&#170; abstract_method() : return_type\l&#537; static_method() : return_type\l+ method() : return_type\l}", style = "rounded, filled, dashed", fillcolor = "springgreen"];
	// class [label = "{<f0>Class|<f1>+ field1 : type\l+ field2 : type\l&#10765; final_field : type\l&#537; static_field : type\l|<f2>+ method() : return_type\l&#537; static_method() : return_type\l&#186; overriden_method() : return_type\l}", style = "rounded, filled", fillcolor = "springgreen"];
	*/
	
	// Implementation -> Interface [arrowhead = "empty"];
	// Subclass -> Class;	
	// Referer -> Referee [arrowhead = "vee"];
	// Implementation -> InterfaceMinor [arrowhead = "odot"];	
	
	Processor -> Publisher [label = "T = T"];
	Processor -> Subscriber [label = "R = T"];
	Publisher:f2 -> Subscriber [arrowhead = "vee"];
	Subscriber:f2 -> Subscription [arrowhead = "vee"];
}
